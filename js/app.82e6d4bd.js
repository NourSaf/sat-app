(function(){"use strict";var e={5441:function(e,t,a){var n=a(5130),r=a(6768),i=a(4232);const o={class:"section"},s={class:"section"},l=["src"],c={key:1};function d(e,t,a,n,d,u){const h=(0,r.g2)("el-col"),m=(0,r.g2)("el-row");return(0,r.uX)(),(0,r.CE)("div",null,[(0,r.bF)(m,null,{default:(0,r.k6)((()=>[(0,r.bF)(h,{span:24},{default:(0,r.k6)((()=>t[0]||(t[0]=[(0,r.Lk)("div",{class:"grid-content"},[(0,r.Lk)("h1",null,"The Dreaming Sat")],-1),(0,r.Lk)("div",null,null,-1)]))),_:1})])),_:1}),(0,r.Lk)("div",o,[t[1]||(t[1]=(0,r.Lk)("h3",null,"CURRENT LOCATION",-1)),(0,r.Lk)("div",null,(0,i.v_)(d.gemini_response),1),t[2]||(t[2]=(0,r.Lk)("h3",null," This is my Dream",-1)),(0,r.Lk)("p",null,(0,i.v_)(d.dream_response),1)]),(0,r.Lk)("div",s,[t[3]||(t[3]=(0,r.Lk)("h3",null,"Sataletie image:",-1)),d.geminiImageUrl?((0,r.uX)(),(0,r.CE)("img",{key:0,class:"sat-image",src:d.geminiImageUrl,alt:"Image of the current satellite location"},null,8,l)):((0,r.uX)(),(0,r.CE)("p",c,"DREAMING..."))])])}a(8111),a(1701);var u=a(6288);const h="RfQMNBDXGpjVttL8LW3kpH",m=new u.ij("AIzaSyCZjHuMPr9JPA37ps8Gs1z3xgN9x3LGVB0");var p={name:"App",data(){return{sat_data:null,interval:null,coordinates_sat:"",dream_data:"",gemini_response:"",dream_response:"",geminiImageUrl:"",prompt:"",dream_prompt:""}},mounted(){this.fetch_data(),this.interval=setInterval((()=>{this.coordinates_sat=this.sat_data.features.map((e=>e.geometry.coordinates)),this.dream_data=this.sat_data.features.map((e=>e)),console.log("This is dream data",this.dream_data),this.fetch_data()}),15e3)},watch:{dream_data:{deep:!0,handler(e){if(e[0].geometry.coordinates){console.log("This is Sat Name",e[0].geometry.coordinates[0]);const t=e[0].geometry.coordinates[0],a=e[0].geometry.coordinates[1],n=e[0].geometry.coordinates[2],r=e[0].properties.name,i=e[0].properties.senspr_type,o=e[0].properties.swath;this.prompt=`What is the place located at latitude ${a}, longitude ${t} and swath of ${o}? Provide only the name of the place. Be accurate`,this.dream_prompt=`This satellite ${r} is at ${a}, ${t} and have this sensor ${i}. Genrate a poem based on what the machine is dreaming about. Max 100 words. Return only the dream text without any extra explination`,this.sendToGemini(),this.generateGeminiImage(a,t,n,o)}}}},methods:{async fetch_data(){try{const e=await fetch(`https://api.spectator.earth/satellite/?api_key=${h}`,{cache:"no-store"});if(!e.ok)throw new Error(`API Error: ${e.status}`);this.sat_data=await e.json(),console.log(this.sat_data)}catch(e){console.error("Fetch error:",e)}},async sendToGemini(){try{const e=m.getGenerativeModel({model:"gemini-2.0-flash"}),t=await e.generateContent(this.prompt),a=await e.generateContent(this.dream_prompt);this.gemini_response=t.response.text(),this.dream_response=a.response.text()}catch(e){console.error("Gemini text generation error:",e)}},async generateGeminiImage(e,t,a,n){const r=`\n        Generate a high-resolution satellite image based on the current satellite position. \n        The image should accurately reflect the real-time location at latitude ${e}, longitude ${t}, \n        and altitude ${a}. Include realistic geographical features such as terrain, water bodies, \n        urban areas, and vegetation. With a resolution of 1080x1080 pixels. Highlight the satellite's \n        swath coverage ${n} and provide a visually accurate representation of the area as seen from orbit.\n        `,i=m.getGenerativeModel({model:"gemini-2.0-flash-exp-image-generation",generationConfig:{responseModalities:["Text","Image"]}});try{const e=await i.generateContent(r);let t=!1;for(const a of e.response.candidates[0].content.parts)if(a.inlineData){this.geminiImageUrl=`data:image/png;base64,${a.inlineData.data}`,t=!0;break}t||(console.error("Gemini didn't return valid inline image data."),this.geminiImageUrl="")}catch(o){console.error("Gemini image generation error:",o),this.geminiImageUrl=""}}},beforeUnmount(){clearInterval(this.interval)}},g=a(1241);const f=(0,g.A)(p,[["render",d],["__scopeId","data-v-4b26dfb4"]]);var v=f,_=a(6416);a(4188);(0,n.Ef)(v).use(_.A).mount("#app")}},t={};function a(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,a),i.exports}a.m=e,function(){var e=[];a.O=function(t,n,r,i){if(!n){var o=1/0;for(d=0;d<e.length;d++){n=e[d][0],r=e[d][1],i=e[d][2];for(var s=!0,l=0;l<n.length;l++)(!1&i||o>=i)&&Object.keys(a.O).every((function(e){return a.O[e](n[l])}))?n.splice(l--,1):(s=!1,i<o&&(o=i));if(s){e.splice(d--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var d=e.length;d>0&&e[d-1][2]>i;d--)e[d]=e[d-1];e[d]=[n,r,i]}}(),function(){a.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return a.d(t,{a:t}),t}}(),function(){a.d=function(e,t){for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}}(),function(){a.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={524:0};a.O.j=function(t){return 0===e[t]};var t=function(t,n){var r,i,o=n[0],s=n[1],l=n[2],c=0;if(o.some((function(t){return 0!==e[t]}))){for(r in s)a.o(s,r)&&(a.m[r]=s[r]);if(l)var d=l(a)}for(t&&t(n);c<o.length;c++)i=o[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(d)},n=self["webpackChunksat_app"]=self["webpackChunksat_app"]||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}();var n=a.O(void 0,[504],(function(){return a(5441)}));n=a.O(n)})();
//# sourceMappingURL=app.82e6d4bd.js.map
(function(){"use strict";var e={2678:function(e,t,a){var r=a(5130),n=a(6768),i=a(4232);const o={class:"section"},s={class:"section img"},l=["src"],c={key:1},d={class:"center-text"};function u(e,t,a,r,u,p){return(0,n.uX)(),(0,n.CE)("div",null,[(0,n.Lk)("div",o,[(0,n.Lk)("div",null,"CURRENT LOCATION "+(0,i.v_)(u.gemini_response),1)]),(0,n.Lk)("div",s,[u.geminiImageUrl?((0,n.uX)(),(0,n.CE)("img",{key:0,class:"sat-image",src:u.geminiImageUrl,alt:"Image of the current satellite location"},null,8,l)):((0,n.uX)(),(0,n.CE)("p",c,"DREAMING...")),(0,n.Lk)("div",d,[(0,n.Lk)("p",null,"I am dreaming of "+(0,i.v_)(u.dream_response),1)])])])}a(8111),a(1701);var p=a(6288);const h="RfQMNBDXGpjVttL8LW3kpH",m=new p.ij("AIzaSyCZjHuMPr9JPA37ps8Gs1z3xgN9x3LGVB0");var g={name:"App",data(){return{sat_data:null,interval:null,coordinates_sat:"",dream_data:"",gemini_response:"",dream_response:"",geminiImageUrl:"",prompt:"",dream_prompt:""}},mounted(){this.fetch_data(),this.interval=setInterval((()=>{this.coordinates_sat=this.sat_data.features.map((e=>e.geometry.coordinates)),this.dream_data=this.sat_data.features.map((e=>e)),console.log("This is dream data",this.dream_data),this.fetch_data()}),15e3)},watch:{dream_data:{deep:!0,handler(e){if(e[0].geometry.coordinates){console.log("This is Sat Name",e[0].geometry.coordinates[0]);const t=e[0].geometry.coordinates[0],a=e[0].geometry.coordinates[1],r=e[0].properties.name,n=e[0].properties.senspr_type,i=e[0].properties.swath;this.prompt=`What is the place located at latitude ${a}, longitude ${t} and swath of ${i}? Provide only the name of the place. Be accurate`,this.dream_prompt=`This satellite ${r} is at ${a}, ${t} and have this sensor ${n}. Genrate a poem based on what the machine is dreaming about. Max 100 words. Return only the dream text without any extra explination`,this.sendToGemini(),this.generateGeminiImage(a,t,i)}}}},methods:{async fetch_data(){try{const e=await fetch(`https://api.spectator.earth/satellite/?api_key=${h}`,{cache:"no-store"});if(!e.ok)throw new Error(`API Error: ${e.status}`);this.sat_data=await e.json(),console.log(this.sat_data)}catch(e){console.error("Fetch error:",e)}},async sendToGemini(){try{const e=m.getGenerativeModel({model:"gemini-2.0-flash"}),t=await e.generateContent(this.prompt),a=await e.generateContent(this.dream_prompt);this.gemini_response=t.response.text(),this.dream_response=a.response.text()}catch(e){console.error("Gemini text generation error:",e)}},async generateGeminiImage(e,t,a){const r=`\n        Generate a highly realistic satellite image at a resolution of exactly 1080x1080 pixels, vividly capturing Earth's surface at the precise coordinates of Longitude: ${t}, Latitude: ${e}. The viewpoint should emulate that of a real-time Earth observation satellite orbiting directly overhead, clearly reflecting the satellite's current swath width coverage of approximately ${a} kilometers.\n\n        Ensure the following details:\n        - Accurately depict natural terrain, including geological features, bodies of water, vegetation types, or urban landscapes corresponding precisely to these coordinates.\n        - Maintain logical realism consistent with satellite imagery: realistic atmospheric clarity, accurate color grading (natural colors), and appropriate shadowing based on sunlight direction relevant to the current time at the provided location.\n        - The perspective should be strictly top-down, perpendicular to Earth's surface, avoiding oblique or angled views.\n        - Include realistic cloud coverage only if typical and logical for the region at this moment; avoid exaggerated or unrealistic cloud formations.\n\n        This image must appear precisely representative of live satellite-captured visuals, suitable for real-time monitoring purposes and credible satellite data applications.\n        `,n=m.getGenerativeModel({model:"gemini-2.0-flash-exp-image-generation",generationConfig:{responseModalities:["Text","Image"]}});try{const e=await n.generateContent(r);let t=!1;for(const a of e.response.candidates[0].content.parts)if(a.inlineData){this.geminiImageUrl=`data:image/png;base64,${a.inlineData.data}`,t=!0;break}t||(console.error("Gemini didn't return valid inline image data."),this.geminiImageUrl="")}catch(i){console.error("Gemini image generation error:",i),this.geminiImageUrl=""}}},beforeUnmount(){clearInterval(this.interval)}},f=a(1241);const v=(0,f.A)(g,[["render",u],["__scopeId","data-v-47c72772"]]);var y=v,_=a(6416);a(4188);(0,r.Ef)(y).use(_.A).mount("#app")}},t={};function a(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,a),i.exports}a.m=e,function(){var e=[];a.O=function(t,r,n,i){if(!r){var o=1/0;for(d=0;d<e.length;d++){r=e[d][0],n=e[d][1],i=e[d][2];for(var s=!0,l=0;l<r.length;l++)(!1&i||o>=i)&&Object.keys(a.O).every((function(e){return a.O[e](r[l])}))?r.splice(l--,1):(s=!1,i<o&&(o=i));if(s){e.splice(d--,1);var c=n();void 0!==c&&(t=c)}}return t}i=i||0;for(var d=e.length;d>0&&e[d-1][2]>i;d--)e[d]=e[d-1];e[d]=[r,n,i]}}(),function(){a.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return a.d(t,{a:t}),t}}(),function(){a.d=function(e,t){for(var r in t)a.o(t,r)&&!a.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}}(),function(){a.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={524:0};a.O.j=function(t){return 0===e[t]};var t=function(t,r){var n,i,o=r[0],s=r[1],l=r[2],c=0;if(o.some((function(t){return 0!==e[t]}))){for(n in s)a.o(s,n)&&(a.m[n]=s[n]);if(l)var d=l(a)}for(t&&t(r);c<o.length;c++)i=o[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(d)},r=self["webpackChunksat_app"]=self["webpackChunksat_app"]||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))}();var r=a.O(void 0,[504],(function(){return a(2678)}));r=a.O(r)})();
//# sourceMappingURL=app.322f3a15.js.map
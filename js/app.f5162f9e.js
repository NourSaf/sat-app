(function(){"use strict";var e={8389:function(e,t,n){var a=n(5130),i=n(6768),r=n(4232);const o={class:"section"},s={class:"section"},l=["src"],c={key:1};function u(e,t,n,a,u,h){const d=(0,i.g2)("el-col"),m=(0,i.g2)("el-row");return(0,i.uX)(),(0,i.CE)("div",null,[(0,i.bF)(m,null,{default:(0,i.k6)((()=>[(0,i.bF)(d,{span:24},{default:(0,i.k6)((()=>t[0]||(t[0]=[(0,i.Lk)("div",{class:"grid-content"},[(0,i.Lk)("h1",null,"The Dreaming Sat")],-1),(0,i.Lk)("div",null,null,-1)]))),_:1})])),_:1}),(0,i.Lk)("div",o,[t[1]||(t[1]=(0,i.Lk)("h3",null,"CURRENT LOCATION",-1)),(0,i.Lk)("div",null,(0,r.v_)(u.gemini_response),1),t[2]||(t[2]=(0,i.Lk)("h3",null," This is my Dream",-1)),(0,i.Lk)("p",null,(0,r.v_)(u.dream_response),1)]),(0,i.Lk)("div",s,[t[3]||(t[3]=(0,i.Lk)("h3",null,"Sataletie image:",-1)),u.geminiImageUrl?((0,i.uX)(),(0,i.CE)("img",{key:0,src:u.geminiImageUrl,alt:"Image of the current satellite location"},null,8,l)):((0,i.uX)(),(0,i.CE)("p",c,"DREAMING..."))])])}n(8111),n(1701);var h=n(6288);const d="RfQMNBDXGpjVttL8LW3kpH",m=new h.ij("AIzaSyCZjHuMPr9JPA37ps8Gs1z3xgN9x3LGVB0");var g={name:"App",data(){return{sat_data:null,interval:null,coordinates_sat:"",dream_data:"",gemini_response:"",dream_response:"",geminiImageUrl:"",prompt:"",dream_prompt:""}},mounted(){this.fetch_data(),this.interval=setInterval((()=>{this.coordinates_sat=this.sat_data.features.map((e=>e.geometry.coordinates)),this.dream_data=this.sat_data.features.map((e=>e)),console.log("This is dream data",this.dream_data),this.fetch_data()}),15e3)},watch:{dream_data:{deep:!0,handler(e){if(e[0].geometry.coordinates){console.log("This is Sat Name",e[0].geometry.coordinates[0]);const t=e[0].geometry.coordinates[0],n=e[0].geometry.coordinates[1],a=e[0].geometry.coordinates[2],i=e[0].properties.name,r=e[0].properties.senspr_type;this.prompt=`What is the place located at latitude ${t}, longitude ${n}? Provide only the name of the place. Be accurate`,this.dream_prompt=`This satellite ${i} is at ${t}, ${n} and have this sensor ${r}. Genrate a poem based on what the machine is dreaming about. Max 100 words. Return only the dream text without any extra explination`,this.sendToGemini(),this.generateGeminiImage(t,n,a)}}}},methods:{async fetch_data(){try{const e=await fetch(`https://api.spectator.earth/satellite/?api_key=${d}`,{cache:"no-store"});if(!e.ok)throw new Error(`API Error: ${e.status}`);this.sat_data=await e.json(),console.log(this.sat_data)}catch(e){console.error("Fetch error:",e)}},async sendToGemini(){try{const e=m.getGenerativeModel({model:"gemini-2.0-flash"}),t=await e.generateContent(this.prompt),n=await e.generateContent(this.dream_prompt);this.gemini_response=t.response.text(),this.dream_response=n.response.text()}catch(e){console.error("Gemini text generation error:",e)}},async generateGeminiImage(e,t,n){const a=`\n        Generate an ultra-realistic, highly detailed satellite imagery scene similar \n        to imagery captured by the ALOS-2 satellite, accurately reflecting \n        real-time position data, \n        including the satellite's current latitude ${e}, longitude ${t}, and altitude ${n}. \n        The image should always maintain a 1080 width by 1080px height ratio. \n        Portray Earth's curvature distinctly, showcasing a dynamic \n        position and perspective consistent with realistic orbital mechanics. \n        Include the specific swath coverage of the satellite, emphasizing accurate and \n        vivid geographical features such as terrain textures, cloud formations, \n        oceanic currents, mountain ranges, rivers, urban centers, and vegetation \n        patterns. The lighting should accurately depict natural sunlight \n        conditions, highlighting realistic shadows and reflections based \n        on the satellite's real-time location relative to \n        Earth and the Sun. Capture authentic atmospheric effects, \n        including the thin glowing blue line of Earth's atmosphere \n        on the horizon, subtle atmospheric scattering, and accurate cloud shadows on land and sea surfaces. Ensure visual clarity, sharpness, and resolution comparable to genuine ALOS-2 satellite imagery. The imagery should evoke an authentic sense of real-time observation, suggesting the continuous changing position and swath coverage of the satellite in Earth's orbit.\n        `,i=m.getGenerativeModel({model:"gemini-2.0-flash-exp-image-generation",generationConfig:{responseModalities:["Text","Image"]}});try{const e=await i.generateContent(a);let t=!1;for(const n of e.response.candidates[0].content.parts)if(n.inlineData){this.geminiImageUrl=`data:image/png;base64,${n.inlineData.data}`,t=!0;break}t||(console.error("Gemini didn't return valid inline image data."),this.geminiImageUrl="")}catch(r){console.error("Gemini image generation error:",r),this.geminiImageUrl=""}}},beforeUnmount(){clearInterval(this.interval)}},p=n(1241);const f=(0,p.A)(g,[["render",u],["__scopeId","data-v-3d73f180"]]);var v=f,y=n(6416);n(4188);(0,a.Ef)(v).use(y.A).mount("#app")}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={exports:{}};return e[a].call(r.exports,r,r.exports,n),r.exports}n.m=e,function(){var e=[];n.O=function(t,a,i,r){if(!a){var o=1/0;for(u=0;u<e.length;u++){a=e[u][0],i=e[u][1],r=e[u][2];for(var s=!0,l=0;l<a.length;l++)(!1&r||o>=r)&&Object.keys(n.O).every((function(e){return n.O[e](a[l])}))?a.splice(l--,1):(s=!1,r<o&&(o=r));if(s){e.splice(u--,1);var c=i();void 0!==c&&(t=c)}}return t}r=r||0;for(var u=e.length;u>0&&e[u-1][2]>r;u--)e[u]=e[u-1];e[u]=[a,i,r]}}(),function(){n.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return n.d(t,{a:t}),t}}(),function(){n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}}(),function(){n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={524:0};n.O.j=function(t){return 0===e[t]};var t=function(t,a){var i,r,o=a[0],s=a[1],l=a[2],c=0;if(o.some((function(t){return 0!==e[t]}))){for(i in s)n.o(s,i)&&(n.m[i]=s[i]);if(l)var u=l(n)}for(t&&t(a);c<o.length;c++)r=o[c],n.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return n.O(u)},a=self["webpackChunksat_app"]=self["webpackChunksat_app"]||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))}();var a=n.O(void 0,[504],(function(){return n(8389)}));a=n.O(a)})();
//# sourceMappingURL=app.f5162f9e.js.map